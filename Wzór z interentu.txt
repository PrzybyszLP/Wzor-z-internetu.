import sys
from time import *
import math
import sqlite3

# polaczenie z baza danych i stworzenie kursora

con = sqlite3.connect("baza.db")
c = con.cursor()


class BazaDanych():
    """ Klasa skupiajaca funkcje realizujace dzialania na bazie danych  """

    @staticmethod
    def create_table():
        """ tworzy tabele z nr rej samochodow, data zaparkowania, i terminem waznosci abonamentu """
        c.execute('CREATE TABLE IF NOT EXISTS tabela (nrrej TEXT NOT NULL, entrdate DATE, abondate DATE)')

    @staticmethod
    def create_price_table():
        """ tworzy tabele cen ze stawka, okresem, kosztem abonamentu i okresem abonamentu
        W TEJ TABELI MUSI BYC ZAWSZE TYLKO JEDEN REKORD!!! """
        c.execute('CREATE TABLE IF NOT EXISTS tabelacen (stawka REAL, okres INTEGER, abonkoszt REAL, abonczas INTEGER)')

    @staticmethod
    def read_record_from_db(nrrej):
        """ odczytuje wszystkie wartosci dla danego nr rejestracyjnego z tabeli z samochodami
         po podaniu nr rejestracyjnego. Zwraca liste tupli """
        c.execute("SELECT nrrej, entrdate, abondate FROM tabela WHERE nrrej = ?", (nrrej,))
        data = c.fetchall()
        return data  # zwraca liste tupli postaci: [(nrrej, entrdate, abondate)]

    @staticmethod
    def read_from_db():
        """ odczytuje wszystkie rekordy z tabeli z samochodami
        zwraca liste tupli """
        c.execute("SELECT nrrej, entrdate, abondate FROM tabela")
        data = c.fetchall()
        return data  # zwraca liste tupli

    @staticmethod
    def read_record_from_pricedb():
        """ odczytuje wartosci stawki, okresu, kosztu abonamentu i okresu abonamentu z tabeli cen
        zwraca liste tupli """
        c.execute("SELECT stawka, okres, abonkoszt, abonczas FROM tabelacen")
        data = c.fetchall()
        return data  # zwraca liste tupli postaci: [(stawka, okres, abonkoszt, abonczas)]

    @staticmethod
    def insert_record_to_pricedb(stawka, okres, abonkoszt, abonczas):
        """ wstawia rekord do tabeli cen - UWAGA UZYWAC TYLKO DO STWORZENIA PIERWSZEGO REKORDU """
        c.execute("INSERT INTO tabelacen (stawka, okres, abonkoszt, abonczas) VALUES (? ,?, ?, ?)",
                  (stawka, okres, abonkoszt, abonczas))
        con.commit()

    @staticmethod
    def insert_record_to_db(nrrej, entrdate, abondate=None):
        """ wstawia nowy rekord do tabeli samochodow """
        c.execute("INSERT INTO tabela (nrrej, entrdate, abondate) VALUES (? ,?, ?)", (nrrej, entrdate, abondate))
        con.commit()

    @staticmethod
    def update_entrdate_in_db(nrrej, entrdate):
        """ update'uje date wjazdu po podaniu nr rejestracyjnego, dla niezaparkowanego samochodu podawac NULL/None """
        c.execute("UPDATE tabela SET entrdate = ? WHERE nrrej = ? ", (entrdate, nrrej))
        con.commit()

    @staticmethod
    def update_abondate_in_db(nrrej, abondate):
        """ update'uje termin waznosci abonamentu, dla braku abonamentu podawac NULL/None """
        c.execute("UPDATE tabela SET abondate = ? WHERE nrrej = ? ", (abondate, nrrej))
        con.commit()

    @staticmethod
    def update_record_in_pricedb(stawka, okres, abonkoszt, abonczas):
        """ update'uje wartosci stawki, okresu, kosztu abonamentu i okresu abonamentu w tabeli cen """
        c.execute("UPDATE tabelacen SET stawka = ?, okres = ?, abonkoszt = ?, abonczas = ?", (stawka, okres,
                                                                                              abonkoszt, abonczas))
        con.commit()

    @staticmethod
    def delete_record_in_db(nrrej):
        """ kasuje rekord w tabeli samochodow po podaniu nr rejestracyjnego UWAGA NIEODWRACALNE! """
        c.execute("DELETE FROM tabela WHERE nrrej = ?", (nrrej,))
        con.commit()


class Stawki():
    """ Klasa przechowujaca metody i dane o stawkach i okresach """

    stawka = 1.00
    okres = 30
    abonczas = 30
    abonkoszt = 100.00

    @staticmethod
    def zmiana_stawki():
        """ metoda zmieniajaca stawki """
        print("\nZmiana wysokosci oplat\n")
        print("Biezaca stawka wynosi %.2f zl za %i minut(y)\n" % (Stawki.stawka, Stawki.okres))
        print("Biezace stawki za abonament wynosza %.2f zl za %i dni\n" % (Stawki.abonkoszt, Stawki.abonczas))
        try:
            s = float(input("Podaj nowa wysokosc oplat: "))
            o = int(input("Podaj nowy czas naliczania w minutach: "))
            ak = float(input("Podaj nowa wysokosc abonamentu: "))
            ac = int(input("Podaj nowy czas trwania abonamentu w danich: "))
        except Exception:
            print("Blad wprowadzania danych! Stawka nie zostala zmieniona!")
            return
        try:
            BazaDanych.update_record_in_pricedb(s, o, ak, ac)  # zapisujemy w bazie
        except Exception:
            print("Blad zapisu danych! Stawka nie zostala zmieniona!")
        else:
            Stawki.stawka = s  # kopiujemy do zmiennych klasy
            Stawki.okres = o
            Stawki.abonczas = ac
            Stawki.abonkoszt = ak


class Menu():
    """ Klasa przechowujaca menu glowne graficzne """

    @staticmethod
    def menu():
        """ metoda menu glownego programu """
        while True:
            print('-' * 83)
            print("PARKING".center(83))
            print('-' * 83)
            print("[W] Wjazd [E] Wyjazd [P} Pojazdy [S] Stawka [A] Przedluz/wykup abonament [K] Koniec".center(83))
            print('-' * 83)
            w = input()
            if not w:
                print("Nieznane polecenie")
            else:
                w = w[0].upper()  # pierwszy znak, duza litera
                if w in 'WEPSKA':  # jezeli podana przez uzytkownika litera jest poprawna to zwroc ja,
                    return w
                print("Nieznane polecenie")  # jezeli nie zwroc "nieznane polecenie"


class Abonament():
    """ Klasa przechowujaca metody odpowiedzialne za zmiane abonamentu"""

    def __init__(self):
        """ metoda sprawdzajaca abonament """
        print("Podaj nr rejestracyjny")
        rej = str(input())[:9].upper()
        if not rej:
            print("Nieznane polecenie")
        else:
            if BazaDanych.read_record_from_db(rej):  # sprawdzamy czy nr rejestracyjny jest w bazie danych
                if not BazaDanych.read_record_from_db(rej)[0][
                    2]:  # sprawdzamy czy uzytkownik nie posiada abonamentu tzn czy wartość w kolumnie abondate jest rowna NULL/None
                    if BazaDanych.read_record_from_db(rej)[0][1]:  # sprawdzamy czy samochod jest na parkingu
                        self.datawazn = BazaDanych.read_record_from_db(rej)[0][
                            1]  # wczytujemy od kiedy auto stoi na parkingu
                        print(
                            "Uzytkownik nie posiada abonamentu. Samochod znajduje się na parkingu. Czy chcesz wykupic abonament? [Y/N]\nKoszt: %.2f zł za %i dni" % (
                                Stawki.abonkoszt, Stawki.abonczas))
                        self.__decyzja_przedluzenie(rej, self.datawazn)
                    else:
                        print(
                            "Uzytkownik nie posiada abonamentu. Samochodu nie ma na parkingu. Czy chcesz wykupic abonament? [Y/N]\nKoszt: %.2f zł za %i dni" % (
                                Stawki.abonkoszt, Stawki.abonczas))
                        self.__decyzja_wykupienie(rej)
                else:
                    self.datawazn = BazaDanych.read_record_from_db(rej)[0][
                        2]  # wczytujemy wartosc daty waznosci abonamentu z bazy danych do zmiennej datawazn
                    self.dni = int(
                        self.datawazn - mktime(localtime()))  # obliczamy ile dni waznego abonamentu pozostało
                    if self.dni <= 0:  # jezeli abonament skonczyl sie
                        BazaDanych.update_abondate_in_db(rej, None)  # ustawiamy wartosc w kolumnie abonament na None
                        if BazaDanych.read_record_from_db(rej)[0][1]:  # sprawdzamy czy samochod jest na parkingu
                            print(
                                "Abonament skonczy sie. Samochod znajduje sie na parkingu. Czy chesz przedluzyc abonament? [Y/N]\nKoszt: %.2f zł za %i dni" % (
                                    Stawki.abonkoszt, Stawki.abonczas))
                            self.__decyzja_przedluzenie(rej, self.datawazn)
                        else:
                            print(
                                "Abonament skonczyl sie. Samochodu nie ma na parkingu. Czy chesz przedluzyc abonament? [Y/N]\nKoszt: %.2f zł za %i dni" % (
                                    Stawki.abonkoszt, Stawki.abonczas))
                            self.__decyzja_wykupienie(rej)
                    else:
                        print("Uzytkownik posiada abonament do ",
                              strftime("%H:%M (%Y-%m-%d)", localtime(self.datawazn)),
                              " Czy chcesz go przedluzyc [Y/N]?")
                        self.__decyzja_przedluzenie(rej, self.datawazn)
            else:
                print(
                    "Uzytkownik nie posiada abonamentu. Samochodu nie ma na parkingu. Czy chcesz wykupic abonament? [Y/N]\nKoszt: %.2f zł za %i dni" % (
                        Stawki.abonkoszt, Stawki.abonczas))
                BazaDanych.insert_record_to_db(rej, None)
                self.__decyzja_wykupienie(rej)

    def __decyzja_wykupienie(self, rej):
        """ metoda pomocnicza do funkcji abonament """
        self.bool1 = self.__wykupienieabonamentu(rej)
        while self.bool1 == 0:
            print("Czy nadal chcesz wykupic abonament? [Y/N]")
            self.bool1 = self.__wykupienieabonamentu(rej)

    def __decyzja_przedluzenie(self, rej, datawazn):
        """ metoda pomocnicza do funkcji abonament """
        self.bool1 = self.__przedluzenieabonamentu(rej, datawazn)
        while self.bool1 == 0:
            print("Czy nadal chcesz wykupic abonament? [Y/N]")
            self.bool1 = self.__przedluzenieabonamentu(rej, datawazn)

    def __wykupienieabonamentu(self, rej):
        """ metoda wykupujaca abonament """
        self.decyzja = input()[0].upper()
        if self.decyzja == "N":
            print("Nie wykupiono abonamentu")
            return 1
        elif self.decyzja == "Y":
            print("Na jak dlugi czas chcesz wykupic abonament? Podaj liczbe dni. Nie mniej niz 30 dni")
            self.dni = int(input())
            if self.dni >= 30:
                self.cena = self.dni * (Stawki.abonkoszt / Stawki.abonczas)
                print("Koszt to: %.2f zl za %i dni" % (self.cena, self.dni))
                self.enter = input("Wcisnij klawisz Enter aby potwierdzic")
                del self.enter
                self.dzien = mktime(localtime()) + self.dni * 24 * 60 * 60
                BazaDanych.update_abondate_in_db(rej, self.dzien)  # zmiana daty waznosci abonamentu w bazie
                return 1
            else:
                print("Za mala liczba dni!")
                return 0
        else:
            print("Nieznane polecenie")
            return 0

    def __przedluzenieabonamentu(self, rej, datawazn):
        """ metoda przedluzajaca abonament """
        self.decyzja = input()[0].upper()
        if self.decyzja == "N":
            print("Nie wykupiono abonamentu")
            return 1
        elif self.decyzja == "Y":
            print("Na jak dlugi czas chcesz wykupic abonament? Podaj liczbe dni.")
            self.dni = int(input())
            if self.dni >= 30:
                self.cena = self.dni * (Stawki.abonkoszt / Stawki.abonczas)
                print("Koszt to: %.2f zl za %i dni" % (self.cena, self.dni))
                self.enter = input("Wcisnij klawisz Enter aby potwierdzic")
                del self.enter
                self.dzien = datawazn + self.dni * 24 * 60 * 60
                BazaDanych.update_abondate_in_db(rej, self.dzien)  # zmiana daty waznosci abonamentu w bazie
                return 1
            else:
                print("Za mala liczba dni!")
                return 0
        else:
            print("Nieznane polecenie")
            return 0


class Pojazdy():
    """ Klasa skupiajaca metody realizujace wjazd, wyjazd i wyswietlanie samochodow na parkingu """

    @staticmethod
    def pojazdy():
        """ metoda pokazujaca liste pojazdow na parkingu i z abonamentem """
        print("-" * 75)
        print("Lista pojazdow na parkingu".center(75))
        print("-" * 75)
        print("|" + "Nr rej.".center(10) + "|" + "Godz. parkowania".center(20) + "|" + " Abonament (Tak/Nie)".center(19)
              + "|" + "Termin abonamentu:".center(19) + "|")
        print("-" * 75)
        for record in BazaDanych.read_from_db():  # pobieramy po kolei kazdy rekord z tabeli samochodow
            if record[1]:
                if record[2]:  # te samochody ktore maja abonament
                    print("|%9s |" % record[0], strftime("%H:%M (%Y-%m-%d)", localtime(record[1])), "|"
                          + "TAK".center(20) + "|", strftime("%H:%M (%Y-%m-%d)", localtime(record[2])) + "|")
                else:  # reszta bez abonamentu
                    print("|%9s |" % record[0], strftime("%H:%M (%Y-%m-%d)", localtime(record[1])), "|"
                          + "NIE".center(20) + "|")
        print("-" * 75)
        print("Lista pojazdow niezaparkowanych z abonamentem".center(75))
        print("-" * 75)
        print(("|" + "Nr rej.".center(10) + "|" + " Abonament (Tak/Nie)".center(20) + "|"
               + "Termin abonamentu:".center(19) + "|").center(75))
        for record in BazaDanych.read_from_db():  # pobieramy po kolei kazdy rekord z tabeli samochodów
            if record[2] and not record[1]:  # bierzemy tylko te samochody ktore maja abonament i nie sa na parkingu
                print(("|%9s |" % record[0] + "TAK".center(20) + "|"
                       + strftime("%H:%M (%Y-%m-%d)", localtime(record[2])) + " |").center(75))

    @staticmethod
    def wyjazd():
        """ metoda rejestrujaca wyjazd pojazdu z parkingu """
        print("Wyjazd pojazdu - godzina", strftime("%H:%M (%Y-%m-%d)"))
        print("Podaj nr rejestracyjny")
        rej = input()[:9].upper()
        if not rej:
            print("Nieznane polecenie")
        else:
            if BazaDanych.read_record_from_db(
                    rej):  # sprawdzamy czy taki numer rejestracyjny jest w bazie to znaczy czy był zaparkowany
                if BazaDanych.read_record_from_db(rej)[0][
                    2]:  # sprawdzamy czy ma abonament tzn czy wartosc w kolumnie abonczas nie jest równa NULL
                    godz = localtime(BazaDanych.read_record_from_db(rej)[0][
                                         1])  # zamiana na localtime aby strftime dzialalo poprawnie
                    print("Godzina wjazdu: ", strftime("%H:%M (%Y-%m-%d)", godz))
                    BazaDanych.update_entrdate_in_db(rej, None)  # ustawiamy wartosc w kolumnie entrdate na None/NULL
                else:
                    godz = localtime(BazaDanych.read_record_from_db(rej)[0][
                                         1])  # zamiana na localtime aby strftime dzialalo poprawnie
                    print("Godzina wjazdu: ", strftime("%H:%M (%Y-%m-%d)", godz))
                    minuty = int(mktime(localtime()) - mktime(godz)) / 60
                    jednostki = math.ceil(minuty / Stawki.okres)  # naliczanie za rozpoczety okres
                    print("\nDo zaplaty: %.2f zl" % (jednostki * Stawki.stawka))
                    BazaDanych.delete_record_in_db(rej)  # usuwamy wpis z bazy danych
            else:
                print("Blad!: Takiego pojazdu nie ma na parkingu!")

    @staticmethod
    def wjazd():
        """ metoda rejestrujaca wjazd pojazdu na parking """
        godz = mktime(localtime())
        print("Wjazd pojazdu - godzina", strftime("%H:%M (%Y-%m-%d)", localtime(godz)))  # zamiana na localtime aby
        #  strftime dzialalo poprawnie
        rej = input("Podaj numer rejestracyjny pojazdu: ")[:9].upper()
        if not rej:
            print("Nieznane polecenie")
        else:
            if not BazaDanych.read_record_from_db(
                    rej):  # sprawdzamy czy samochod nie jest zaparkowany tzn czy w bazie nie ma rekordu o podanej nazwie numeru rejestracyjnego
                BazaDanych.insert_record_to_db(rej, godz)
                print("Wprowadzono")
            elif not BazaDanych.read_record_from_db(rej)[0][
                1]:  # jezeli jest taki rekord w bazie to sprawdzamy czy samochodu nie ma na parkingu, czyli czy wartosc w kolumnie entrdate jest NULL
                BazaDanych.update_entrdate_in_db(rej, godz)
            else:
                print("Blad! Taki pojazd juz jest na parkingu!")


def wybor():
    """ funkcja realizujaca wybor uzytkownika programu """
    while True:
        w = Menu.menu()
        if w == "K":
            break
        elif w == "S":
            Stawki.zmiana_stawki()
        elif w == "P":
            Pojazdy.pojazdy()
        elif w == "E":
            Pojazdy.wyjazd()
        elif w == "W":
            Pojazdy.wjazd()
        elif w == "A":
            st = Abonament()
            del st


def init():
    """ funkcja inicjalizujaca baze danych """
    try:
        BazaDanych.create_table()  # otwarcie bazy danych
        BazaDanych.create_price_table()
    except Exception:
        print("Blad krytyczny! Baza danych nie zostala otwarta!")
        sys.exit(0)  # wyjscie z programu
    print("Inicjalizacja udana. Bazy danych zostaly otworzone")
    if BazaDanych.read_record_from_pricedb():  # czy juz istnieje rekord ze stawkami w bazie
        (Stawki.stawka, Stawki.okres, Stawki.abonkoszt, Stawki.abonczas) = BazaDanych.read_record_from_pricedb()[
            0]  # jezeli tak to kopiujemy stawki
    else:
        BazaDanych.insert_record_to_pricedb(Stawki.stawka, Stawki.okres, Stawki.abonkoszt, Stawki.abonczas)
        Stawki.zmiana_stawki()  # jezeli nie - wczytujemy od uzytkownika


# program glowny

if __name__ == "__main__":
    init()  # otwarcie bazy
    try:
        wybor()  # interfejs uzytkownika
    except Exception:
        print("Wystapil powazny blad!")
    c.close()
    con.close()  # zamkniecie bazy